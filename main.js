/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => VideoNote
});
module.exports = __toCommonJS(main_exports);

// language.ts
var Language = class {
  constructor() {
    this.name = "";
    this.fontName = "";
    this.langColor = "#ffffff";
    this.langBorderColor = "#8a5cf5";
    this.langBackgroundColor = "#000000";
    this.categories = [];
    this.words = [];
    this.wordOrder = [];
  }
};
var WordCategory = class {
  constructor() {
    this.name = "new category";
  }
};
var Word = class {
  constructor() {
    this.wordInLanguage = "new word";
    this.categoryNames = [];
    this.descriptions = ["description"];
  }
};

// language-view.ts
var import_obsidian2 = require("obsidian");

// html-helper.ts
var import_obsidian = require("obsidian");
var HTMLHelper = class {
  static AutoAdjustWidth(cleanDiv, el, text) {
    const tempEl = cleanDiv.createEl("div", { text });
    tempEl.style.position = "absolute";
    tempEl.style.whiteSpace = "pre-wrap";
    tempEl.style.visibility = "hidden";
    tempEl.style.font = el.style.font;
    tempEl.style.fontSize = el.style.fontSize;
    tempEl.style.writingMode = el.style.writingMode;
    tempEl.style.textOrientation = el.style.textOrientation;
    tempEl.style.padding = "1vh";
    const temp = tempEl.getBoundingClientRect();
    el.style.width = temp.width + "px";
    tempEl.remove();
  }
  static AutoAdjustHeight(cleanDiv, el, text) {
    const tempEl = cleanDiv.createEl("div", { text });
    tempEl.style.position = "absolute";
    tempEl.style.whiteSpace = "pre-wrap";
    tempEl.style.visibility = "hidden";
    tempEl.style.font = el.style.font;
    tempEl.style.fontSize = el.style.fontSize;
    tempEl.style.writingMode = el.style.writingMode;
    tempEl.style.textOrientation = el.style.textOrientation;
    tempEl.style.padding = "1vh";
    const temp = tempEl.getBoundingClientRect();
    el.style.height = temp.height + "px";
    tempEl.remove();
  }
  static AddTextToDiv(div, text) {
    div.textContent = text;
  }
  static CreateNewTextDiv(parentDiv, text, classes = "") {
    const newDiv = parentDiv.createEl("div", { text });
    newDiv.className = classes;
    return newDiv;
  }
  static async CreateList(div, extraDivClasses, listIsVertical, mainArray, objUIMaker) {
    div.empty();
    div.className = (listIsVertical ? "vbox" : "hbox") + " " + extraDivClasses;
    for (let i = 0; i < mainArray.length; i++) {
      objUIMaker(div.createDiv(!listIsVertical ? "vbox" : "hbox"), i);
    }
  }
  static async CreateListEditor(div, extraDivClasses, listIsVertical, view, mainArray, newObjMaker, objUIMaker, refreshPage) {
    div.empty();
    div.className = (listIsVertical ? "vbox" : "hbox") + " " + extraDivClasses;
    const listDiv = div.createDiv((listIsVertical ? "vbox" : "hbox") + " " + extraDivClasses);
    const refreshList = async () => {
      this.CreateListEditor(
        div,
        extraDivClasses,
        listIsVertical,
        view,
        mainArray,
        newObjMaker,
        objUIMaker,
        refreshPage
      );
    };
    for (let i = 0; i < mainArray.length; i++) {
      objUIMaker(listDiv.createDiv(!listIsVertical ? "vbox" : "hbox"), i, refreshList, refreshPage);
    }
    const addButton = div.createEl("button");
    (0, import_obsidian.setIcon)(addButton, "plus");
    view.registerDomEvent(addButton, "click", async () => {
      const index = mainArray.length;
      mainArray.push(await newObjMaker());
      await objUIMaker(listDiv.createDiv(!listIsVertical ? "vbox" : "hbox"), index, refreshList, refreshPage);
    });
  }
  static CreateColorSwapButton(parentDiv, view, color1, color2, isVertical = false, afterSwap) {
    const div = parentDiv.createDiv(isVertical ? "vbox" : "hbox");
    const obj1Name = this.CreateNewTextDiv(div, color1.name);
    const swapButton = div.createEl("button");
    const obj2Name = this.CreateNewTextDiv(div, color2.name);
    (0, import_obsidian.setIcon)(swapButton, isVertical ? "arrow-down-up" : "arrow-left-right");
    obj1Name.style.writingMode = isVertical ? "vertical-lr" : "unset";
    obj2Name.style.writingMode = isVertical ? "vertical-lr" : "unset";
    obj1Name.style.textOrientation = isVertical ? "upright" : "unset";
    obj2Name.style.textOrientation = isVertical ? "upright" : "unset";
    view.registerDomEvent(swapButton, "click", () => {
      const temp = color1.el.value;
      color1.el.value = color2.el.value;
      color2.el.value = temp;
      afterSwap();
    });
  }
  static CreateShiftElementUpButton(div, view, mainArray, index, listIsVertical, refreshList) {
    const upButton = div.createEl("button");
    (0, import_obsidian.setIcon)(upButton, listIsVertical ? "arrow-big-up" : "arrow-big-left");
    view.registerDomEvent(upButton, "click", () => {
      if (index > 0) {
        const temp = mainArray.splice(index, 1);
        mainArray.splice(index - 1, 0, temp[0]);
        refreshList();
      }
    });
  }
  static CreateShiftElementDownButton(div, view, mainArray, index, listIsVertical, refreshList) {
    const downButton = div.createEl("button");
    (0, import_obsidian.setIcon)(downButton, listIsVertical ? "arrow-big-down" : "arrow-big-right");
    view.registerDomEvent(downButton, "click", () => {
      if (index < mainArray.length) {
        const temp = mainArray.splice(index, 1);
        mainArray.splice(index + 1, 0, temp[0]);
        refreshList();
      }
    });
  }
  static CreateDeleteButton(div, view, mainArray, index, refreshList) {
    const deleteButton = div.createEl("button");
    deleteButton.className = "remove-button";
    (0, import_obsidian.setIcon)(deleteButton, "trash-2");
    view.registerDomEvent(deleteButton, "click", () => {
      mainArray.splice(index, 1);
      refreshList();
    });
  }
  static CreateExitButton(div, view, beforeExit = async () => {
  }, afterExit = async () => {
  }) {
    const exitButton = div.createEl("button");
    exitButton.className = "exit-button";
    (0, import_obsidian.setIcon)(exitButton, "x");
    view.registerDomEvent(exitButton, "click", async () => {
      await beforeExit();
      div.remove();
      afterExit();
    });
  }
};

// language-view.ts
var VIEW_TYPE_TGT_LANGUAGE = "tgt-language-view";
var TGT_LANGUAGE_EXTENSION = "tgt-lang";
var LanguageView = class extends import_obsidian2.TextFileView {
  constructor(leaf) {
    super(leaf);
  }
  getViewType() {
    return VIEW_TYPE_TGT_LANGUAGE;
  }
  async onLoadFile(file) {
    this.currentFileName = file.basename;
    super.onLoadFile(file);
  }
  async onRename(file) {
    this.currentFileName = file.basename;
    this.language.name = this.currentFileName;
    this.requestSave();
  }
  getDisplayText() {
    return this.currentFileName;
  }
  async setViewData(data, clear) {
    this.Display(data);
  }
  getViewData() {
    return JSON.stringify(this.language);
  }
  clear() {
    return;
  }
  Display(data) {
    this.ParseAndReassignData(data);
    this.SortCategoriesOfWords();
    this.contentEl.empty();
    this.mainDiv = this.contentEl.createDiv("tgt-lang-main hbox");
    this.SetUserDefinedCSSProperties();
    this.CreateTabs();
  }
  //#region Display Helper Functions
  ParseAndReassignData(data) {
    const plainObj = JSON.parse(data);
    this.language = new Language();
    Object.assign(this.language, plainObj);
  }
  SortCategoriesOfWords() {
    const categoryOrder = /* @__PURE__ */ new Map();
    for (let i = 0; i < this.language.categories.length; i++) {
      categoryOrder.set(this.language.categories[i].name, i);
    }
    const compareFunction = (a, b) => {
      let num1 = categoryOrder.get(a);
      let num2 = categoryOrder.get(b);
      num1 = num1 === void 0 ? -1 : num1;
      num2 = num2 === void 0 ? -1 : num2;
      return num1 - num2;
    };
    for (let i = 0; i < this.language.words.length; i++) {
      this.language.words[i].categoryNames.sort(compareFunction);
    }
  }
  SetUserDefinedCSSProperties() {
    this.mainDiv.style.color = this.language.langColor;
    this.mainDiv.style.borderColor = this.language.langBorderColor;
    this.mainDiv.style.backgroundColor = this.language.langBackgroundColor;
  }
  //#endregion Display Helper Functions
  CreateTabs() {
    const tabDiv = this.mainDiv.createDiv("tgt-lang-tab-bar vbox");
    const displayDiv = this.mainDiv.createDiv();
    const fontInfo = tabDiv.createEl("button");
    const categories = tabDiv.createEl("button");
    const search = tabDiv.createEl("button");
    const add = tabDiv.createEl("button");
    (0, import_obsidian2.setIcon)(fontInfo, "type");
    (0, import_obsidian2.setIcon)(categories, "rows-3");
    (0, import_obsidian2.setIcon)(search, "search");
    (0, import_obsidian2.setIcon)(add, "plus");
    this.registerDomEvent(fontInfo, "click", () => {
      this.ShowLayoutTab(displayDiv);
    });
    this.registerDomEvent(categories, "click", () => {
      this.ShowWordCategoriesTab(displayDiv);
    });
    this.registerDomEvent(search, "click", () => {
      this.ShowSearchTab(displayDiv);
    });
    this.registerDomEvent(add, "click", () => {
      this.ShowAddWordsTab(displayDiv);
    });
    this.ShowSearchTab(displayDiv);
  }
  //#region Layout Tab
  ShowLayoutTab(div) {
    div.empty();
    div.className = "tgt-lang-display vbox";
    HTMLHelper.CreateNewTextDiv(div, "Font Name:");
    const fontName = div.createEl("input", { type: "text", value: this.language.fontName });
    this.registerDomEvent(fontName, "change", () => {
      this.language.fontName = fontName.value;
      this.requestSave();
    });
    fontName.focus();
    this.ShowDictionaryColorEditor(div);
    const wordOrderLabelDiv = div.createDiv("hbox");
    HTMLHelper.CreateNewTextDiv(wordOrderLabelDiv, "Custom Word Order:");
    const resortButton = wordOrderLabelDiv.createEl("button", { text: "Reorder Words" });
    this.ShowWordOrderEditor(div.createDiv());
    this.registerDomEvent(resortButton, "click", () => {
      this.ResortWords();
    });
  }
  ShowDictionaryColorEditor(editorDiv) {
    const saveAndChangeColors = () => {
      this.language.langColor = langColor.value;
      this.language.langBorderColor = langBorderColor.value;
      this.language.langBackgroundColor = langBackgroundColor.value;
      this.SetUserDefinedCSSProperties();
      this.requestSave();
    };
    const labelDiv1 = editorDiv.createDiv("hbox");
    HTMLHelper.CreateNewTextDiv(labelDiv1, "This Dictionary's Text Color:");
    const langColor = editorDiv.createEl("input", { type: "color", value: this.language.langColor });
    this.registerDomEvent(langColor, "change", () => {
      saveAndChangeColors();
    });
    const labelDiv2 = editorDiv.createDiv("hbox");
    HTMLHelper.CreateNewTextDiv(labelDiv2, "This Dictionary's Border Color:");
    const langBorderColor = editorDiv.createEl("input", { type: "color", value: this.language.langBorderColor });
    this.registerDomEvent(langBorderColor, "change", () => {
      saveAndChangeColors();
    });
    const labelDiv3 = editorDiv.createDiv("hbox");
    HTMLHelper.CreateNewTextDiv(labelDiv3, "This Dictionary's Background Colors:");
    const langBackgroundColor = editorDiv.createEl("input", { type: "color", value: this.language.langBackgroundColor });
    this.registerDomEvent(langBackgroundColor, "change", () => {
      saveAndChangeColors();
    });
    HTMLHelper.CreateColorSwapButton(
      labelDiv1,
      this,
      { name: "text", el: langColor },
      { name: "border", el: langBorderColor },
      false,
      async () => {
        saveAndChangeColors();
      }
    );
    HTMLHelper.CreateColorSwapButton(
      labelDiv2,
      this,
      { name: "border", el: langBorderColor },
      { name: "1st background", el: langBackgroundColor },
      false,
      async () => {
        saveAndChangeColors();
      }
    );
    HTMLHelper.CreateColorSwapButton(
      labelDiv3,
      this,
      { name: "1st background", el: langBackgroundColor },
      { name: "text", el: langColor },
      false,
      async () => {
        saveAndChangeColors();
      }
    );
  }
  ShowWordOrderEditor(editorDiv) {
    HTMLHelper.CreateListEditor(
      editorDiv,
      "",
      true,
      this,
      this.language.wordOrder,
      () => {
        return "";
      },
      (div, index, refreshList) => {
        div.className = "hbox";
        HTMLHelper.CreateShiftElementUpButton(div, this, this.language.wordOrder, index, true, refreshList);
        HTMLHelper.CreateShiftElementDownButton(div, this, this.language.wordOrder, index, true, refreshList);
        const input = div.createEl("input", { type: "text", value: this.language.wordOrder[index] });
        input.style.fontFamily = this.language.fontName;
        this.registerDomEvent(input, "change", () => {
          this.language.wordOrder[index] = input.value;
          this.requestSave();
        });
        HTMLHelper.CreateDeleteButton(div, this, this.language.wordOrder, index, refreshList);
      },
      async () => {
        this.requestSave();
        this.ShowWordOrderEditor(editorDiv);
      }
    );
  }
  //#endregion Layout Tab
  //#region Word Categories Tab
  ShowWordCategoriesTab(div) {
    const displayDiv = div;
    HTMLHelper.CreateNewTextDiv(div, "Word Categories");
    HTMLHelper.CreateListEditor(
      displayDiv,
      "tgt-lang-display",
      true,
      this,
      this.language.categories,
      () => {
        return new WordCategory();
      },
      (div2, index, refreshList) => {
        this.ShowCategoryInList(div2, index, refreshList, displayDiv);
      },
      async () => {
        this.ShowWordCategoriesTab(displayDiv);
      }
    );
  }
  ShowCategoryInList(div, index, refreshList, displayDiv) {
    div.empty();
    div.className = "hbox";
    HTMLHelper.CreateShiftElementUpButton(div, this, this.language.categories, index, true, refreshList);
    HTMLHelper.CreateShiftElementDownButton(div, this, this.language.categories, index, true, refreshList);
    this.ShowCategoryNameEditor(div, index);
    HTMLHelper.CreateDeleteButton(div, this, this.language.categories, index, refreshList);
  }
  ShowCategoryNameEditor(div, categoryIndex) {
    const categoryName = div.createEl("input", { type: "text", value: this.language.categories[categoryIndex].name });
    categoryName.focus();
    const renameCategory = (oldName, newName) => {
      this.language.categories[categoryIndex].name = newName;
      for (let w = 0; w < this.language.words.length; w++) {
        const currWord = this.language.words[w];
        for (let c = 0; c < currWord.categoryNames.length; c++) {
          if (currWord.categoryNames[c] === oldName) {
            this.language.words[w].categoryNames[c] = newName;
          }
        }
      }
    };
    this.registerDomEvent(categoryName, "change", () => {
      const oldName = this.language.categories[categoryIndex].name;
      const newName = categoryName.value;
      renameCategory(oldName, newName);
    });
  }
  //#endregion Word Categories Tab
  //#region Search Tab
  ShowSearchTab(div) {
    div.empty();
    div.className = "tgt-lang-display vbox";
    const searchBar = div.createDiv("vbox");
    const listDiv = div.createDiv();
    this.CreateSearchUI(div, searchBar, listDiv);
  }
  //#region Search Helper Functions
  ResortWords() {
    const customWordOrder = this.LoadCustomWordOrder();
    const compareFunction = (a, b) => {
      return customWordOrder(a.wordInLanguage, b.wordInLanguage);
    };
    this.language.words.sort(compareFunction);
  }
  LoadCustomWordOrder() {
    const wordOrder = /* @__PURE__ */ new Map();
    for (let i = 0; i < this.language.wordOrder.length; i++) {
      wordOrder.set(this.language.wordOrder[i], i);
    }
    const charOrder = (a, b) => {
      let num1 = wordOrder.get(a);
      let num2 = wordOrder.get(b);
      num1 = num1 === void 0 ? -1 : num1;
      num2 = num2 === void 0 ? -1 : num2;
      if (num1 === -1 && num2 === -1) {
        return a < b ? -1 : a === b ? 0 : 1;
      }
      return num1 - num2;
    };
    return (a, b) => {
      const arr1 = a.split("");
      const arr2 = b.split("");
      const aIsSmaller = a.length < b.length;
      const min = aIsSmaller ? a.length : b.length;
      for (let i = 0; i < min; i++) {
        const currentDifference = charOrder(arr1[i], arr2[i]);
        if (currentDifference != 0) {
          return currentDifference;
        }
      }
      return aIsSmaller ? -1 : b.length === min ? 0 : 1;
    };
  }
  CreateSearchUI(mainDiv, searchBarDiv, listDiv) {
    const results = [];
    const categories = [];
    const searchBar = searchBarDiv.createDiv("hbox");
    const term = searchBar.createEl("input", { type: "text" });
    term.focus();
    const searchButton = searchBar.createEl("button");
    (0, import_obsidian2.setIcon)(searchButton, "search");
    const wordCount = searchBar.createEl("div");
    const filtersDiv = searchBarDiv.createDiv("hbox");
    HTMLHelper.CreateNewTextDiv(filtersDiv, "Look for words with no category");
    const noCategory = filtersDiv.createEl("input", { type: "checkbox" });
    HTMLHelper.CreateNewTextDiv(filtersDiv, "Look for words with duplicate names");
    const lookForDuplicates = filtersDiv.createEl("input", { type: "checkbox" });
    this.ShowCategoryListOfWordEditor(filtersDiv.createDiv(), categories);
    const refreshResults = async () => {
      HTMLHelper.CreateList(
        listDiv,
        "tgt-lang-word-list",
        true,
        results,
        (div, index) => {
          this.ShowWord(mainDiv, div, results[index], refreshResults, Search);
        }
      );
    };
    const Search = async () => {
      this.FindMatches(term.value, noCategory.checked, lookForDuplicates.checked, categories, results);
      const numResults = results.length;
      const newWordCount = numResults + " result" + (numResults === 1 ? "" : "s");
      wordCount.textContent = newWordCount;
      HTMLHelper.AutoAdjustWidth(searchBar, wordCount, newWordCount);
      refreshResults();
    };
    this.registerDomEvent(searchButton, "click", () => {
      Search();
    });
    this.registerDomEvent(term, "keydown", (e) => {
      e.key === "Enter" ? Search() : false;
    });
    Search();
  }
  FindMatches(searchTerm, lookForNoCategory, lookForDuplicates, categories, matchingIndexes) {
    matchingIndexes.length = 0;
    if (lookForDuplicates) {
      this.SearchForDuplicates(searchTerm, matchingIndexes);
      for (let i = matchingIndexes.length - 1; i >= 0; i--) {
        if (!this.CheckIfWordMatches(this.language.words[matchingIndexes[i]], searchTerm, lookForNoCategory, categories)) {
          matchingIndexes.splice(i, 1);
        }
      }
      return;
    }
    for (let i = 0; i < this.language.words.length; i++) {
      if (this.CheckIfWordMatches(this.language.words[i], searchTerm, lookForNoCategory, categories)) {
        matchingIndexes.push(i);
      }
    }
  }
  SearchForDuplicates(searchTerm, matchingIndexes) {
    let justAddedDuplicate = false;
    for (let i = 0; i < this.language.words.length - 1; i++) {
      const currWord = this.language.words[i];
      const nextWord = this.language.words[i + 1];
      if (currWord.wordInLanguage !== nextWord.wordInLanguage) {
        justAddedDuplicate = false;
        continue;
      }
      if (searchTerm === "") {
        if (!justAddedDuplicate) {
          matchingIndexes.push(i);
        }
        matchingIndexes.push(i + 1);
        justAddedDuplicate = true;
        continue;
      }
      let entireWordString = currWord.wordInLanguage;
      for (let j = 0; j < currWord.descriptions.length; j++) {
        entireWordString += currWord.descriptions[j] + "\n";
      }
      if (entireWordString.contains(searchTerm)) {
        if (!justAddedDuplicate) {
          matchingIndexes.push(i);
        }
        matchingIndexes.push(i + 1);
        justAddedDuplicate = true;
      }
    }
  }
  CheckIfWordMatches(currWord, searchTerm, lookForNoCategory, categories) {
    const includeAllFromCategory = searchTerm === "";
    if (!includeAllFromCategory) {
      let entireWordString = currWord.wordInLanguage;
      for (let i = 0; i < currWord.descriptions.length; i++) {
        entireWordString += currWord.descriptions[i] + "\n";
      }
      if (!entireWordString.contains(searchTerm)) {
        return false;
      }
    }
    if (lookForNoCategory) {
      return currWord.categoryNames.length === 0;
    }
    if (categories.length === 0) {
      return true;
    }
    let wordCategories = "";
    for (let i = 0; i < currWord.categoryNames.length; i++) {
      wordCategories += currWord.categoryNames[i] + "\n";
    }
    let matches = true;
    for (let i = 0; matches && i < categories.length; i++) {
      if (!wordCategories.contains(categories[i])) {
        matches = false;
      }
    }
    return matches;
  }
  //#endregion Search Helper Functions
  ShowWord(mainDiv, div, index, refreshList, refreshListOnDelete) {
    div.empty();
    div.className = "tgt-lang-word vbox";
    const currWord = this.language.words[index];
    this.CreateWordTopDiv(mainDiv, div, index, refreshList, refreshListOnDelete);
    this.ShowCategoryListOfWord(div.createDiv(), currWord.categoryNames);
    this.ShowWordDescriptionList(div.createDiv(), currWord.descriptions);
  }
  CreateWordTopDiv(mainDiv, div, index, refreshList, refreshListOnDelete) {
    const topDiv = div.createDiv("hbox");
    const currWord = this.language.words[index];
    const word = HTMLHelper.CreateNewTextDiv(topDiv, currWord.wordInLanguage, "pointer-hover");
    const editButton = topDiv.createEl("button");
    word.style.fontFamily = this.language.fontName;
    (0, import_obsidian2.setIcon)(editButton, "pencil");
    this.registerDomEvent(word, "click", () => {
      navigator.clipboard.writeText(currWord.wordInLanguage);
    });
    this.registerDomEvent(editButton, "click", () => {
      this.ShowWordEditor(mainDiv.createDiv(), "tgt-lang-popup", index, refreshList, refreshListOnDelete, mainDiv);
    });
  }
  //#endregion Search Tab
  //#region Add Words Tab
  ShowAddWordsTab(div) {
    this.ShowWordEditor(div, "tgt-lang-display");
  }
  //#region Add Words Helper Functions
  ShowWordEditor(div, extraDivClasses, existingWordIndex = -1, refreshList = async () => {
  }, refreshListOnDelete = async () => {
  }, mainDiv = void 0) {
    div.empty();
    div.className = "vbox " + extraDivClasses;
    if (existingWordIndex > -1) {
      div.style.backgroundColor = this.mainDiv.style.backgroundColor;
    }
    const creatingNewWord = existingWordIndex === -1;
    let isDuplicate = false;
    const duplicateIndicator = div.createDiv();
    let nameChanged = false;
    const wordToEdit = creatingNewWord ? new Word() : this.language.words[existingWordIndex];
    if (creatingNewWord) {
      wordToEdit.wordInLanguage = "";
    }
    HTMLHelper.CreateNewTextDiv(div, "New Word:");
    const word = div.createEl("input", { type: "text", value: creatingNewWord ? "" : wordToEdit.wordInLanguage });
    word.focus();
    HTMLHelper.CreateNewTextDiv(div, "Categories:");
    this.ShowCategoryListOfWordEditor(div.createDiv(), wordToEdit.categoryNames);
    HTMLHelper.CreateNewTextDiv(div, "Descriptions:");
    this.ShowWordDescriptionListEditor(div.createDiv(), wordToEdit.descriptions);
    word.style.fontFamily = this.language.fontName;
    const checkIfUnique = () => {
      for (let i = 0; !isDuplicate && i < this.language.words.length; i++) {
        isDuplicate = this.language.words[i].wordInLanguage === wordToEdit.wordInLanguage;
      }
      duplicateIndicator.textContent = isDuplicate ? "Name is duplicate" : "Name is unique";
    };
    if (creatingNewWord) {
      duplicateIndicator.textContent = "Name is unique";
    } else {
      checkIfUnique();
    }
    this.registerDomEvent(word, "change", () => {
      nameChanged = true;
      wordToEdit.wordInLanguage = word.value;
      checkIfUnique();
    });
    if (creatingNewWord) {
      const saveButton = div.createEl("button", { text: "save" });
      this.registerDomEvent(saveButton, "click", () => {
        this.language.words.push(wordToEdit);
        this.ResortWords();
        this.requestSave();
        this.ShowAddWordsTab(div);
      });
    } else {
      const buttonDiv = div.createDiv("hbox");
      const saveButton = buttonDiv.createEl("button", { text: "save" });
      HTMLHelper.CreateDeleteButton(buttonDiv, this, this.language.words, existingWordIndex, async () => {
        div.remove();
        refreshListOnDelete();
      });
      this.registerDomEvent(saveButton, "click", () => {
        div.remove();
        if (nameChanged) {
          this.ResortWords();
        }
        this.requestSave();
        return refreshList();
      });
    }
  }
  ShowWordDescriptionList(div, descriptions) {
    const makeUI = (div2, index) => {
      this.ShowWordDescriptionInList(div2, descriptions, index);
    };
    HTMLHelper.CreateList(div, "", true, descriptions, makeUI);
  }
  ShowWordDescriptionInList(div, descriptions, index) {
    div.classList.add("tgt-lang-word-description");
    HTMLHelper.AddTextToDiv(div, descriptions[index]);
  }
  ShowWordDescriptionListEditor(div, descriptions) {
    const makeNewDescription = () => {
      return "";
    };
    const makeUI = (div2, index, refreshList2) => {
      this.ShowWordDescriptionInListEditor(div2, descriptions, index, refreshList2);
    };
    const refreshList = async () => {
      this.ShowWordDescriptionListEditor(div, descriptions);
    };
    HTMLHelper.CreateListEditor(div, "", true, this, descriptions, makeNewDescription, makeUI, refreshList);
  }
  ShowWordDescriptionInListEditor(div, descriptions, index, refreshList) {
    HTMLHelper.CreateShiftElementUpButton(div, this, descriptions, index, true, refreshList);
    HTMLHelper.CreateShiftElementDownButton(div, this, descriptions, index, true, refreshList);
    const textArea = div.createEl("textarea", { text: descriptions[index] });
    HTMLHelper.CreateDeleteButton(div, this, descriptions, index, refreshList);
    this.registerDomEvent(textArea, "input", () => {
      HTMLHelper.AutoAdjustHeight(div, textArea, textArea.value);
    });
    this.registerDomEvent(textArea, "change", () => {
      descriptions[index] = textArea.value;
    });
    HTMLHelper.AutoAdjustHeight(div, textArea, textArea.value);
  }
  ShowCategoryListOfWord(div, list) {
    div.empty();
    const makeUI = (div2, index) => {
      this.ShowCategoryOfWordInList(div2, list, index);
    };
    HTMLHelper.CreateList(div, "tgt-lang-category-list", false, list, makeUI);
  }
  ShowCategoryOfWordInList(div, list, index) {
    div.className = "hbox";
    HTMLHelper.AddTextToDiv(div, list[index]);
  }
  ShowCategoryListOfWordEditor(div, list) {
    div.empty();
    const makeNewCategory = () => {
      return "";
    };
    const makeUI = (div2, index, refreshList2) => {
      this.ShowCategoryOfWordInListEditor(div2, list, index, refreshList2);
    };
    const refreshList = async () => {
      this.ShowCategoryListOfWordEditor(div, list);
    };
    HTMLHelper.CreateListEditor(div, "tgt-lang-category-list", false, this, list, makeNewCategory, makeUI, refreshList);
  }
  ShowCategoryOfWordInListEditor(div, list, index, refreshList) {
    div.className = "hbox";
    const select = div.createEl("select");
    for (let i = 0; i < this.language.categories.length; i++) {
      const category = this.language.categories[i].name;
      select.createEl("option", { text: category, value: category });
      if (i === 0) {
        const isNewCategory = list[index] === "";
        select.value = isNewCategory ? category : list[index];
        list[index] = isNewCategory ? category : list[index];
      }
    }
    this.registerDomEvent(select, "change", () => {
      list[index] = select.value;
    });
    HTMLHelper.CreateDeleteButton(div, this, list, index, refreshList);
  }
  //#endregion Add Words Helper Functions
  //#endregion Add Words Tab
};

// main.ts
var import_obsidian3 = require("obsidian");
var VideoNote = class extends import_obsidian3.Plugin {
  async onload() {
    this.registerView(
      VIEW_TYPE_TGT_LANGUAGE,
      (leaf) => new LanguageView(leaf)
    );
    this.registerExtensions([TGT_LANGUAGE_EXTENSION], VIEW_TYPE_TGT_LANGUAGE);
    this.addCommand({
      id: "new-lang-dict",
      name: "Create Language Dictionary",
      callback: async () => {
        const newFile = await this.app.vault.create("Unnamed." + TGT_LANGUAGE_EXTENSION, JSON.stringify(new Language()));
        this.app.workspace.getLeaf("tab").openFile(newFile);
      }
    });
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        menu.addItem((item) => {
          item.setTitle("New Language Dictionary").setIcon("book-type").onClick(async () => {
            const newFile = await this.app.vault.create((file.parent === null ? "" : file.parent.path + "/") + "Unnamed." + TGT_LANGUAGE_EXTENSION, JSON.stringify(new Language()));
            this.app.workspace.getLeaf("tab").openFile(newFile);
          });
        });
      })
    );
  }
  onunload() {
  }
  async activateView(view_type) {
    const { workspace } = this.app;
    let leaf = null;
    leaf = workspace.getLeaf("tab");
    if (leaf === null) {
      new import_obsidian3.Notice("Failed to create view: workspace leaf was null");
      return;
    }
    await leaf.setViewState({ type: view_type, active: true });
    workspace.revealLeaf(leaf);
  }
};
//# sourceMappingURL=data:application/json;base64,
